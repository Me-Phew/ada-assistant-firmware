#include "esp_log.h"
#include "esp_wn_iface.h"
#include "esp_wn_models.h"
#include "esp_afe_sr_models.h"
#include "esp_mn_iface.h"
#include "esp_mn_models.h"
#include "model_path.h"
#include "string.h"
#include "esp_timer.h"

#include "ada_i2s_microphone_driver.h"
#include "ada_i2s_speaker_driver.h"
#include "ada_led_strip_driver.h"

#include "ada_wake_word_detection_engine.h"

static const char *TAG = "ADA_WAKE_WORD_DETECTION_ENGINE";

static esp_afe_sr_iface_t *afe_handle = NULL;
static volatile int task_flag = 0;

static volatile int leds_enabled = 0; // Flag to track if LEDs are enabled

typedef enum
{
    STATE_DETECTING, // Listening for wake word
    STATE_RECORDING  // Recording user speech after wake word
} detection_state_t;

static volatile detection_state_t current_state = STATE_DETECTING;
static int16_t *recording_buffer = NULL;
static size_t recording_length = 0;
static size_t max_recording_length = 0;
static int silence_counter = 0;
#define SILENCE_THRESHOLD 500           // Adjust based on your noise floor
#define SILENCE_DURATION_MS 1500        // Stop recording after 1.5 seconds of silence
#define MAX_RECORDING_DURATION_MS 10000 // Maximum recording time (10 seconds)

static void process_recording(void)
{
    ada_led_strip_stop_effect();
    clear_led_strip();
    ada_led_strip_start_sequential_fade_in_with_duration(0, 0, 100, 0, 5000, false);
    ada_i2s_start_file_playback("/audio/custom_listening_end.pcm");
    vTaskDelay(pdMS_TO_TICKS(5000));

    // Process the recorded audio data in recording_buffer
    ESP_LOGI(TAG, "Processing recorded audio...\n");

    // Reset recording buffer and length
    memset(recording_buffer, 0, max_recording_length);
    recording_length = 0;
}

void feed_Task(void *arg)
{
    esp_afe_sr_data_t *afe_data = arg;
    int audio_chunksize = afe_handle->get_feed_chunksize(afe_data);
    int nch = afe_handle->get_feed_channel_num(afe_data);
    int feed_channel = i2s_microphone_get_feed_channel();
    assert(nch == feed_channel);
    int16_t *i2s_buff = malloc(audio_chunksize * sizeof(int16_t) * feed_channel);
    assert(i2s_buff);

    while (task_flag)
    {
        i2s_microphone_get_feed_data(i2s_buff, audio_chunksize * sizeof(int16_t) * feed_channel);

        afe_handle->feed(afe_data, i2s_buff);
    }
    if (i2s_buff)
    {
        free(i2s_buff);
        i2s_buff = NULL;
    }
    vTaskDelete(NULL);
}

// static void toggleLeds()
// {
//     if (leds_enabled)
//     {
//         // stop_rainbow_effect(); // Stop the rainbow effect
//         clear_led_strip();
//         leds_enabled = 0; // Set the flag to indicate LEDs are disabled

//         ada_i2s_stop_playback(); // Stop any audio playback
//         ada_i2s_start_file_playback("/audio/custom_listening_end.pcm");
//         return;
//     }

//     // ada_led_strip_sequential_fade_in(0, 0, 0, 255, 14, 20, 100);
//     ada_led_strip_start_sequential_fade_in_with_duration(0, 0, 0, 255, 404);
//     // start_rainbow_effect(); // Start the rainbow effect
//     // set_all_leds_to_white();
//     leds_enabled = 1; // Set the flag to indicate LEDs are enabled

//     ada_i2s_start_file_playback("/audio/custom_listening_start.pcm");

//     vTaskDelay(pdMS_TO_TICKS(404));
// }

void detect_Task(void *arg)
{
    esp_afe_sr_data_t *afe_data = arg;
    int afe_chunksize = afe_handle->get_fetch_chunksize(afe_data);
    int16_t *buff = malloc(afe_chunksize * sizeof(int16_t));
    assert(buff);

    // Configure recording buffer
    int sample_rate = afe_handle->get_samp_rate(afe_data);
    max_recording_length = sample_rate * MAX_RECORDING_DURATION_MS / 1000 * sizeof(int16_t);
    recording_buffer = malloc(max_recording_length);
    assert(recording_buffer);

    int samples_per_ms = sample_rate / 1000;
    int silence_duration_samples = samples_per_ms * SILENCE_DURATION_MS;

    ESP_LOGI(TAG, "------------detect start------------\n");

    uint32_t recording_start_time = 0;

    while (task_flag)
    {
        afe_fetch_result_t *res = afe_handle->fetch(afe_data);
        if (!res || res->ret_value == ESP_FAIL)
        {
            ESP_LOGE(TAG, "fetch error!\n");
            break;
        }

        switch (current_state)
        {
        case STATE_DETECTING:
            // Waiting for wake word
            if (res->wakeup_state == WAKENET_DETECTED)
            {
                ESP_LOGI(TAG, "wakeword detected\n");
                ESP_LOGI(TAG, "model index:%d, word index:%d\n", res->wakenet_model_index, res->wake_word_index);
                ESP_LOGI(TAG, "-----------RECORDING USER SPEECH-----------\n");

                ada_led_strip_start_sequential_fade_in_with_duration(0, 0, 0, 100, 404, false);
                ada_i2s_start_file_playback("/audio/custom_listening_start.pcm");
                vTaskDelay(pdMS_TO_TICKS(404));

                // Switch to recording state
                current_state = STATE_RECORDING;
                recording_length = 0;
                silence_counter = 0;
                recording_start_time = esp_timer_get_time() / 1000; // Convert to ms

                ada_led_strip_start_sequential_fade_out_with_duration(CONFIG_ADA_LED_STRIP_MAX_LEDS - 1, 0, 0, 100, 10000, true);
            }
            break;

        case STATE_RECORDING:
            // Recording user speech
            if (recording_length + afe_chunksize * sizeof(int16_t) <= max_recording_length)
            {
                // Copy audio data to recording buffer
                memcpy(recording_buffer + recording_length / sizeof(int16_t),
                       res->data,
                       afe_chunksize * sizeof(int16_t));
                recording_length += afe_chunksize * sizeof(int16_t);

                // Check for silence (simple amplitude-based)
                bool is_silent = true;
                for (int i = 0; i < afe_chunksize; i++)
                {
                    if (abs(res->data[i]) > SILENCE_THRESHOLD)
                    {
                        is_silent = false;
                        break;
                    }
                }

                if (is_silent)
                {
                    silence_counter += afe_chunksize;
                    if (silence_counter >= silence_duration_samples)
                    {
                        // Silence detected for the duration threshold

                        process_recording();

                        current_state = STATE_DETECTING;
                        ESP_LOGI(TAG, "-----------RESUMING DETECTION-----------\n");
                    }
                }
                else
                {
                    silence_counter = 0; // Reset silence counter
                }

                // Check for maximum recording duration
                uint32_t current_time = esp_timer_get_time() / 1000;
                if (current_time - recording_start_time >= MAX_RECORDING_DURATION_MS)
                {
                    ESP_LOGI(TAG, "Maximum recording duration reached");
                    process_recording();
                    current_state = STATE_DETECTING;
                    ESP_LOGI(TAG, "-----------RESUMING DETECTION-----------\n");
                }
            }
            else
            {
                // Buffer full
                ESP_LOGI(TAG, "Recording buffer full");
                process_recording();
                current_state = STATE_DETECTING;
                ESP_LOGI(TAG, "-----------RESUMING DETECTION-----------\n");
            }
            break;
        }
    }

    if (buff)
    {
        free(buff);
        buff = NULL;
    }

    if (recording_buffer)
    {
        free(recording_buffer);
        recording_buffer = NULL;
    }

    vTaskDelete(NULL);
}

void init_wake_word_detection_engine()
{
    ESP_ERROR_CHECK(i2s_microphone_init());

    srmodel_list_t *models = esp_srmodel_init("model");
    if (models)
    {
        for (int i = 0; i < models->num; i++)
        {
            if (strstr(models->model_name[i], ESP_WN_PREFIX) != NULL)
            {
                ESP_LOGI(TAG, "wakenet model in flash: %s\n", models->model_name[i]);
            }
        }
    }

    afe_config_t *afe_config = afe_config_init(i2s_microphone_get_input_format(), models, AFE_TYPE_SR, AFE_MODE_LOW_COST);

    if (afe_config->wakenet_model_name)
    {
        ESP_LOGI(TAG, "wakeword model in AFE config: %s\n", afe_config->wakenet_model_name);
    }

    if (afe_config->wakenet_model_name_2)
    {
        ESP_LOGI(TAG, "wakeword model in AFE config: %s\n", afe_config->wakenet_model_name_2);
    }

    afe_handle = esp_afe_handle_from_config(afe_config);
    esp_afe_sr_data_t *afe_data = afe_handle->create_from_config(afe_config);
    afe_config_free(afe_config);

    task_flag = 1;
    xTaskCreatePinnedToCore(&feed_Task, "feed", 8 * 1024, (void *)afe_data, 5, NULL, 0);
    xTaskCreatePinnedToCore(&detect_Task, "detect", 4 * 1024, (void *)afe_data, 5, NULL, 1);
}
